#pragma once


class Vector {  // Vector - имя класса, имя нового типа данных
    // private: -- область видимости по умолчанию - доступ к полям в этой области имеют только методы класса и друзья класса


    // внутри класса объявляются члены класса: поля и методы

    // поля класса - переменные - члены класса

    int size; // размер вектора

    int* data; // данные вектора - массив из size элементов


public:





    // функции, объявленные внутри класса - это методы класса

    // Vector_print_Vector*(Vector* this) -- функция-метод класса с т.з. компилятора
    // void Vector_print_Vector*(Vector* this) { 
    //          for (int i = 0; i < this->size; ++i) {
    //             std::cout << this->data[i] << std::endl;
    //          }


    void print();

    // Vector_setSize_Vector*_int
    void setSize(int size);

    int getSize() const;


private:


protected:

private:

public:


    // Конструктор - специальный метод класса, который служит для иниицализации его полей.
    // 1. Его имя = имя класса
    // 2. Он не возвращает результата (даже void)
    // Конструктор вызывается автоматически при объявлении экземпляра класса

    // Конструкторов может быть несколько (за счет механизма перегрузки).

    // Конструктор без входных параметров называется конструктором по умолчанию.
    Vector();

    // Конструтор, принимающий входные аргументы/параметры
    Vector(int size);

    // Деструктор - специальный метод класса, который служит для освобождения ресурсов, выделенных классом при работе объекта.
    // 1. Имя метода = ~ + имя класса 
    // 2. Не возвращает результата
    // 3. Не принимает входных параметров

    // Деструктор вызывается автоматически при уничтожении объекта.
    // Деструктор может быть только один.
    ~Vector();

    // Оператор присваивания перегружается только при помощи метода
    // Оператор присваивания возвращает тот же объект для возможности построения цепочки присваивания: a=b=c == a.operator=(b.operator=(c))
    Vector& operator=(const Vector& r);

    // Конструктор копирования - конструктор, который принимает на вход ссылку на другой экземпляр этого класса
    Vector(const Vector& src);

    Vector operator+(const Vector& r) const;// a = b + c

    // Объявление функции, дружественной классу Vector
    friend Vector operator*(int l, const Vector& r);

    // Логические операторы: ==, !=, >, <, >=, <=
    friend bool operator==(const Vector& l, const Vector& r);

    // Оператор с присвоением: +=, -=, /=, *=
    Vector& operator+=(const Vector& r);

    Vector& operator*=(int r);

};

Vector operator*(const Vector& l, int r);

